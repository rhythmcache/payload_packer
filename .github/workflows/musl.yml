name: Linux musl Builds

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        architecture: [x86_64, aarch64, armv7, i686, riscv64]
      fail-fast: false

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc and build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler cmake
          protoc --version

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Set target
        id: set-target
        run: |
          case "${{ matrix.architecture }}" in
            x86_64)
              echo "TARGET=x86_64-unknown-linux-musl" >> $GITHUB_ENV
              echo "NEED_CROSS=false" >> $GITHUB_ENV
              echo "ARCH_DIR=x86_64" >> $GITHUB_ENV
              echo "HOST_TRIPLE=x86_64-unknown-linux-musl" >> $GITHUB_ENV
              ;;
            aarch64)
              echo "TARGET=aarch64-unknown-linux-musl" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/aarch64-linux-musl-cross.tgz" >> $GITHUB_ENV
              echo "CC=aarch64-linux-musl-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=aarch64" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              echo "HOST_TRIPLE=aarch64-unknown-linux-musl" >> $GITHUB_ENV
              ;;
            armv7)
              echo "TARGET=armv7-unknown-linux-musleabihf" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/armv7l-linux-musleabihf-cross.tgz" >> $GITHUB_ENV
              echo "CC=armv7l-linux-musleabihf-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=armv7" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              echo "HOST_TRIPLE=armv7l-unknown-linux-musleabihf" >> $GITHUB_ENV
              ;;
            i686)
              echo "TARGET=i686-unknown-linux-musl" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/i686-linux-musl-cross.tgz" >> $GITHUB_ENV
              echo "CC=i686-linux-musl-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=x86" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              echo "HOST_TRIPLE=i686-unknown-linux-musl" >> $GITHUB_ENV
              ;;
            riscv64)
              echo "TARGET=riscv64gc-unknown-linux-musl" >> $GITHUB_ENV
              echo "TOOLCHAIN_URL=https://musl.cc/riscv64-linux-musl-cross.tgz" >> $GITHUB_ENV
              echo "CC=riscv64-linux-musl-gcc" >> $GITHUB_ENV
              echo "ARCH_DIR=riscv64" >> $GITHUB_ENV
              echo "NEED_CROSS=true" >> $GITHUB_ENV
              echo "HOST_TRIPLE=riscv64-unknown-linux-musl" >> $GITHUB_ENV
              ;;
          esac

      - name: Add Rust target
        run: rustup target add ${{ env.TARGET }}

      - name: Install musl-tools
        if: env.NEED_CROSS == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl musl-tools musl-dev

      - name: Download MUSL Compiler
        if: env.NEED_CROSS == 'true'
        run: |
          mkdir -p /tmp/musl-cross
          cd /tmp/musl-cross
          wget ${{ env.TOOLCHAIN_URL }} -O toolchain.tgz
          tar -xzf toolchain.tgz
          find /tmp/musl-cross -name "${{ env.CC }}" -type f
          TOOLCHAIN_BIN=$(find /tmp/musl-cross -name "${{ env.CC }}" -type f | xargs dirname)
          echo "PATH=$PATH:$TOOLCHAIN_BIN" >> $GITHUB_ENV
          echo "Added $TOOLCHAIN_BIN to PATH"
          echo "CC=$TOOLCHAIN_BIN/${{ env.CC }}" >> $GITHUB_ENV
          # Also store CXX for C++ compilation
          echo "CXX=$(echo ${{ env.CC }} | sed 's/gcc/g++/')" >> $GITHUB_ENV

      - name: Setup config
        if: env.NEED_CROSS == 'true'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.${{ env.TARGET }}]
          linker = "${{ env.CC }}"
          EOF
          cat .cargo/config.toml

      - name: Prepare library directories
        run: |
          mkdir -p $PWD/lib/musl/${{ env.ARCH_DIR }}
          mkdir -p $PWD/lib/musl/${{ env.ARCH_DIR }}/include
          mkdir -p $PWD/lib/musl/${{ env.ARCH_DIR }}/lib
          mkdir -p $PWD/lib/musl/${{ env.ARCH_DIR }}/pkgconfig
          echo "INSTALL_PREFIX=$PWD/lib/musl/${{ env.ARCH_DIR }}" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PWD/lib/musl/${{ env.ARCH_DIR }}/lib/pkgconfig" >> $GITHUB_ENV
          echo "CFLAGS=-I$PWD/lib/musl/${{ env.ARCH_DIR }}/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$PWD/lib/musl/${{ env.ARCH_DIR }}/lib" >> $GITHUB_ENV

      - name: Build liblzma
        run: |
          cd /tmp
          wget https://github.com/tukaani-project/xz/releases/download/v5.8.1/xz-5.8.1.tar.gz
          tar -xzf xz-5.8.1.tar.gz
          cd xz-5.8.1
          
          if [ "${{ env.NEED_CROSS }}" = "true" ]; then
            echo "Cross-compiling liblzma with ${{ env.CC }}"
            ./configure --prefix=${{ env.INSTALL_PREFIX }} --disable-shared --enable-static --disable-nls --disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo --host=${{ env.HOST_TRIPLE }}
          else
            ./configure --prefix=${{ env.INSTALL_PREFIX }} --disable-shared --enable-static --disable-nls --disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo
          fi
          
          make -j$(nproc)
          make install
          
          # Verify installation
          ls -la ${{ env.INSTALL_PREFIX }}/lib/liblzma.a || echo "Failed to build liblzma.a"
        env:
          CC: ${{ env.CC }}
          CFLAGS: -fPIC ${{ env.CFLAGS }}
          LDFLAGS: ${{ env.LDFLAGS }}

      - name: Verify libraries
        run: |
          echo "Checking library directories:"
          ls -la ${{ env.INSTALL_PREFIX }}/lib/ || echo "No lib directory found"
          echo "Static libraries:"
          find ${{ env.INSTALL_PREFIX }}/lib -name "*.a" || echo "No static libraries found"
          echo "PKG config files:"
          find ${{ env.INSTALL_PREFIX }}/lib -name "*.pc" || echo "No pkg-config files found"

      - name: Build for ${{ matrix.architecture }}
        run: |
          echo "Building for ${{ env.TARGET }}"
          if [ "${{ env.NEED_CROSS }}" = "true" ]; then
            echo "Cross-compiling with ${{ env.CC }}"
            echo "PATH: $PATH"
            which ${{ env.CC }} || echo "Cross compiler not found in PATH"
          fi
          cargo build --release --target ${{ env.TARGET }} -v
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          RUSTFLAGS: '-C target-feature=+crt-static'

      - name: Create Dir
        run: mkdir -p artifacts

      - name: Copy binaries
        run: |
          cp target/${{ env.TARGET }}/release/payload_packer ./artifacts/payload_packer-${{ matrix.architecture }} || echo "Binary not found"
          # Make it executable if it exists
          if [ -f ./artifacts/payload_packer-${{ matrix.architecture }} ]; then
            chmod +x ./artifacts/payload_packer-${{ matrix.architecture }}
          else
            echo "Failed to find binary"
            find target -type f -executable | grep -v '\.so' | sort
          fi

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: payload_packer-${{ matrix.architecture }}-linux-musl
          path: artifacts/payload_packer-${{ matrix.architecture }}
          if-no-files-found: warn
